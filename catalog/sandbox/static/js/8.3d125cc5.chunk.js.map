{"version":3,"sources":["content/WidgetTypePage/buildCodeSnippet.js","content/WidgetTypePage/renderWidget.js","content/WidgetTypePage/EmbedWidget.jsx","content/WidgetTypePage/injectExternalDependencies.js","content/WidgetTypePage/injectWidgetRuntime.js","content/WidgetTypePage/WidgetTypePage.jsx","content/WidgetTypePage/index.js","components/Info/Info.jsx","components/AppFooter/AppFooter.jsx","components/AppFooter/index.js","components/AppHeader/AppHeader.jsx","components/AppHeader/index.js"],"names":["buildCodeSnippet","widget","renderFunctionName","shortcode","split","map","str","toUpperCase","substr","join","majorVersion","version","htmlId","name","replace","$1","renderFunction","window","elem","document","getElementById","getAttribute","domElement","setAttribute","EmbedWidget","doLoad","moreProps","useState","depsLoaded","setDepsLoaded","JSON","stringify","reduce","res","char","charCodeAt","className","trim","emptyWidget","id","InlineLoading","useEffect","deps","externalPeerDependencies","keys","Object","length","Promise","all","resolve","reject","script","createElement","src","crossorigin","async","onload","onerror","body","appendChild","injectExternalDependencies","then","elementId","renderWidget","assetPromises","directoryUrl","files","includes","push","link","crossOrigin","type","media","rel","href","head","injectWidgetRuntime","WidgetTypePage","shortCode","match","params","registry","find","tabProps","role","tabIndex","startLoadingWidget","setStartLoadingWidget","randomSettings","settingsSchema","properties","fields","carry","fieldName","fieldInfo","randomIndex","Math","floor","random","examples","randomExample","assign","buildRandomWidgetSettings","widgetAttributes","AppHeader","Tabs","Tab","label","Breadcrumb","noTrailingSlash","BreadcrumbItem","isCurrentPage","title","repositoryUrl","Button","renderIcon","LogoGithub16","kind","CodeSnippet","FormLabel","Tooltip","triggerText","file","alt","status","UnorderedList","ListItem","createdAt","Date","toDateString","updatedAt","description","i","depName","CopyLink16","size","ArrowRight16","availableTranslations","langcode","Link","hideCopyButton","onClick","style","display","marginRight","field","AppFooter","InfoSection","children","heading","InfoCard","props","splitHeading","phrase","splitPhrase","thirdWord","pop","createArrayFromPhrase","icon","HeaderContainer","render","isSideNavExpanded","onClickSideNavExpand","Header","SkipToContent","HeaderMenuButton","isActive","HeaderName","element","to","prefix","HeaderMenuItem","SideNav","expanded","isPersistent","SideNavItems","HeaderSideNavItems","HeaderGlobalBar"],"mappings":"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","file":"static/js/8.3d125cc5.chunk.js","sourcesContent":["const buildCodeSnippet = (widget) => {\n  const renderFunctionName =\n    'render' +\n    widget.shortcode\n      .split('-')\n      .map((str) => `${str[0].toUpperCase()}${str.substr(1)}`)\n      .join('');\n  const majorVersion = widget.version.split('.')[0];\n  return `\n<html>\n    <!-- ... -->\n  <body>\n    <!-- ... -->\n    <div id=\"widget-id\"></div>\n    <!-- ... -->\n    <script src=\"http://s3.us.cloud-object-storage.appdomain.cloud/widget-registry/${widget.shortcode}/${majorVersion}/js/main.js\" defer></script>\n    <script src=\"http://s3.us.cloud-object-storage.appdomain.cloud/widget-registry/loader.js\" defer></script>\n    <script defer>\n      document.loadWidget({\n        instanceId: \"widget-id\",\n        language: \"\",\n        onRenderFinish: domElement => {},\n        origin: \"\",\n        renderFunctionName: \"${renderFunctionName}\",\n      });\n    </script>\n  </body>\n</html>\n`;\n};\n\nexport default buildCodeSnippet;\n","export default function (widget, htmlId) {\n  const name = widget.shortcode\n    .replace(/^([a-z])|-([a-z])/g, function ($1) {\n      return $1.toUpperCase();\n    })\n    .replace(/-/g, '');\n  const renderFunctionName = `render${name}`;\n  const renderFunction = window[renderFunctionName];\n  const elem = document.getElementById(htmlId);\n  if (renderFunction && elem && !elem.getAttribute('rendered')) {\n    renderFunction(htmlId, '', '', (domElement) => {\n      domElement.setAttribute('rendered', true);\n    });\n  }\n}\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport injectExternalDependencies from './injectExternalDependencies';\nimport injectWidgetRuntime from './injectWidgetRuntime';\n\nimport { InlineLoading } from 'carbon-components-react';\n\nconst EmbedWidget = ({ widget, doLoad, moreProps }) => {\n  // This is not strictly necessary, but it is state.\n  const [depsLoaded, setDepsLoaded] = useState(false);\n  // Create a unique HTML id for each widget embedding.\n  const htmlId = `widget-id--${widget.shortcode}--${JSON.stringify(moreProps)\n    .split('')\n    .reduce((res, char) => res + char.charCodeAt(0), 0)}`;\n  let className = moreProps.className || '';\n  className = `${className} widget-instance`.trim();\n  delete moreProps.className;\n  const emptyWidget = (\n    <div id={htmlId} className={className} {...moreProps}>\n      <InlineLoading />\n    </div>\n  );\n\n  // Let's inject the external dependencies ASAP.\n  useEffect(() => {\n    if (!depsLoaded) {\n      injectExternalDependencies(widget).then(() => setDepsLoaded(true));\n    }\n  });\n  if (!doLoad) {\n    return emptyWidget;\n  }\n  injectWidgetRuntime(widget, htmlId);\n  return emptyWidget;\n};\n\nEmbedWidget.propTypes = {\n  widget: PropTypes.object.isRequired,\n  doLoad: PropTypes.bool,\n  moreProps: PropTypes.object,\n};\n\nexport default EmbedWidget;\n","export default function (widget) {\n  const deps = widget.externalPeerDependencies || {};\n  const keys = Object.keys(deps);\n  if (!keys.length) {\n    return Promise.resolve([]);\n  }\n  return Promise.all(\n    keys.map(\n      (name) =>\n        new Promise((resolve, reject) => {\n          const id = `widget-type-runtime-dep--${name}`;\n          if (document.getElementById(id)) {\n            return resolve(name);\n          }\n          const script = document.createElement('script');\n          script.id = id;\n          script.src = deps[name].src;\n          script.crossorigin = 'anonymous';\n          script.async = false;\n          script.onload = resolve;\n          script.onerror = reject;\n          document.body.appendChild(script);\n        }),\n    ),\n  );\n}\n","import renderWidget from './renderWidget';\n\nexport default function (widget, htmlId) {\n  const elementId = `widget-type-${widget.shortcode}-runtime-code`;\n  if (document.getElementById(elementId)) {\n    return Promise.resolve().then(() => renderWidget(widget, htmlId));\n  }\n  const assetPromises = [\n    new Promise((resolve, reject) => {\n      const script = document.createElement('script');\n      script.id = elementId;\n      script.src = `${widget.directoryUrl}/js/main.js`;\n      script.crossorigin = 'anonymous';\n      script.async = true;\n      script.onload = resolve;\n      script.onerror = reject;\n      document.body.appendChild(script);\n    }),\n  ];\n  if (widget.files.includes('css/main.css')) {\n    assetPromises.push(\n      new Promise((resolve, reject) => {\n        const link = document.createElement('link');\n        link.crossOrigin = 'anonymous';\n        link.type = 'text/css';\n        link.media = 'all';\n        link.rel = 'stylesheet';\n        link.href = `${widget.directoryUrl}/css/main.css`;\n        link.onload = resolve;\n        link.onerror = reject;\n        document.head.appendChild(link);\n      }),\n    );\n  }\n  return Promise.all(assetPromises).then(() => renderWidget(widget, htmlId));\n}\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport registry from '../../data/registry.json';\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  Button,\n  CodeSnippet,\n  FormLabel,\n  Link,\n  ListItem,\n  Tab,\n  Tabs,\n  Tooltip,\n  UnorderedList,\n} from 'carbon-components-react';\nimport AppHeader from '../../components/AppHeader';\nimport AppFooter from '../../components/AppFooter';\n\nimport buildCodeSnippet from './buildCodeSnippet';\nimport {\n  ArrowRight16,\n  CopyLink16,\n  DocumentTasks32,\n  DocumentView32,\n  LogoGithub16,\n  NoImage32,\n  ScriptReference32,\n  WarningAlt16,\n} from '@carbon/icons-react';\nimport EmbedWidget from './EmbedWidget';\n\nconst WidgetTypePage = ({\n  match: {\n    params: { shortCode },\n  },\n}) => {\n  const widget = registry.find(({ shortcode }) => shortcode === shortCode);\n  const tabsProps = {\n    role: 'presentation',\n    tabIndex: 0,\n  };\n  const tabProps = {\n    role: 'presentation',\n    tabIndex: 0,\n  };\n  const [startLoadingWidget, setStartLoadingWidget] = useState(false);\n\n  const buildRandomWidgetSettings = (widget) => {\n    if (\n      !widget.settingsSchema ||\n      !widget.settingsSchema.properties.fields ||\n      !Object.keys(widget.settingsSchema.properties.fields.properties).length\n    ) {\n      return [];\n    }\n    return Object.keys(widget.settingsSchema.properties.fields.properties).reduce(\n      (carry, fieldName) => {\n        const fieldInfo = widget.settingsSchema.properties.fields.properties[fieldName];\n        const randomIndex = Math.floor(Math.random() * fieldInfo.examples.length);\n        const randomExample = fieldInfo.examples[randomIndex];\n        return Object.assign(carry, { [fieldName]: randomExample });\n      },\n      {},\n    );\n  };\n  const randomSettings = buildRandomWidgetSettings(widget);\n  const widgetAttributes = Object.keys(randomSettings).reduce((carry, name) => {\n    carry[`data-${name}`] = randomSettings[name];\n    return carry;\n  }, {});\n\n  return (\n    <>\n      <AppHeader />\n      <div className=\"bx--grid bx--grid--full-width landing-page widget-type\">\n        <Tabs className=\"widget-type--tabs\" {...tabsProps}>\n          <Tab {...tabProps} id={`${widget.shortcode}--tab-1`} label=\"Information\">\n            <div className=\"bx--row bx--row--r1\">\n              <div className=\"bx--col-lg-16\">\n                <Breadcrumb noTrailingSlash>\n                  <BreadcrumbItem href=\"/\">Home</BreadcrumbItem>\n                  <BreadcrumbItem href=\"/widget-types\">Widget types</BreadcrumbItem>\n                  <BreadcrumbItem isCurrentPage href=\"/\">\n                    {widget.title}\n                  </BreadcrumbItem>\n                </Breadcrumb>\n                <div className=\"widget-type__heading--wrapper\">\n                  <div className=\"widget-type__heading\">\n                    <div className=\"widget-type__heading--icon\">\n                      <DocumentTasks32 />\n                    </div>\n                    <h1 className=\"widget-type__heading--text\">{widget.title}</h1>\n                  </div>\n                  {widget.repositoryUrl ? (\n                    <div className=\"widget-type__heading--repo-link\">\n                      <Button href={widget.repositoryUrl} renderIcon={LogoGithub16} kind=\"tertiary\">\n                        Source code\n                      </Button>\n                    </div>\n                  ) : (\n                    <></>\n                  )}\n                </div>\n              </div>\n            </div>\n            <div className=\"bx--row bx--row--r2\">\n              <div className=\"bx--col-lg-8\">\n                <p className=\"widget-type--notes\">\n                  All the information contained in this page has been extracted from the widget\n                  registry. Some info is generated by the compilation process, while some other is\n                  provided by the widget developer in the{' '}\n                  <CodeSnippet type=\"inline\">widget.json</CodeSnippet> file.\n                </p>\n              </div>\n            </div>\n            <div className=\"bx--row bx--row--r3\">\n              <div className=\"bx--col-lg-8\">\n                <FormLabel>\n                  <Tooltip triggerText=\"Thumbnail\">\n                    Thumbnail image as stored in the widget type code base. Check the &ldquo;Live\n                    preview&rdquo; tab for an interactive demo.\n                  </Tooltip>\n                </FormLabel>\n                {widget.files.find((file) => file === 'thumbnail.svg') ? (\n                  <div>\n                    <img src={`${widget.directoryUrl}/thumbnail.svg`} alt=\"Widget thumbnail\" />\n                  </div>\n                ) : (\n                  <div>\n                    <NoImage32 />\n                  </div>\n                )}\n              </div>\n              <div className=\"bx--col-lg-4\">\n                <FormLabel>Version</FormLabel>\n                <div>\n                  {widget.status ? (\n                    <>\n                      <CodeSnippet type=\"inline\" className={`status--${widget.status}`}>\n                        {widget.status}\n                      </CodeSnippet>{' '}\n                    </>\n                  ) : (\n                    <></>\n                  )}\n                  <code className=\"widget-type--version\">{widget.version}</code>\n                </div>\n              </div>\n              <div className=\"bx--col-lg-4\">\n                <FormLabel>Date</FormLabel>\n                <UnorderedList>\n                  <ListItem>\n                    Created on{' '}\n                    {widget.createdAt ? new Date(widget.createdAt).toDateString() : 'Unknown'}\n                  </ListItem>\n                  <ListItem>\n                    Updated on{' '}\n                    {widget.updatedAt ? new Date(widget.updatedAt).toDateString() : 'Unknown'}\n                  </ListItem>\n                </UnorderedList>\n              </div>\n            </div>\n            <article className=\"bx--row bx--row--r4\">\n              <section className=\"bx--col-lg-8 bx--col-md-8\">\n                <FormLabel>Description</FormLabel>\n                <p className=\"widget-type--description\">{widget.description}</p>\n              </section>\n              <aside className=\"bx--col-lg-4 bx--col-md-4 bx--col-sm-4\">\n                <div>\n                  <FormLabel>\n                    <Tooltip triggerText=\"Files\">\n                      Technical information about the compiled assets of the widget.\n                    </Tooltip>\n                  </FormLabel>\n                  <UnorderedList>\n                    {widget.files.map((file, i) => (\n                      <ListItem key={`key-${i}`}>\n                        <CodeSnippet type=\"inline\">{file}</CodeSnippet>\n                      </ListItem>\n                    ))}\n                  </UnorderedList>\n                </div>\n                <div>\n                  <FormLabel className=\"bx--label--inline--sm\">\n                    <Tooltip triggerText=\"External dependencies\">\n                      This widget expects the following dependecies to exist in the page when being\n                      rendered.\n                    </Tooltip>\n                  </FormLabel>\n                  <UnorderedList>\n                    {Object.keys(widget.externalPeerDependencies || {}).map((depName, i) => (\n                      <ListItem key={`key-${i}`}>\n                        <Tooltip triggerText={depName} renderIcon={CopyLink16}>\n                          <p id=\"tooltip-body\">{widget.externalPeerDependencies[depName].src}</p>\n                          <div className=\"bx--tooltip__footer\">\n                            <Button\n                              href={widget.externalPeerDependencies[depName].src}\n                              size=\"small\"\n                              renderIcon={ArrowRight16}\n                            >\n                              Visit\n                            </Button>\n                          </div>\n                        </Tooltip>\n                      </ListItem>\n                    ))}\n                  </UnorderedList>\n                </div>\n              </aside>\n              <aside className=\"bx--col-lg-4 bx--col-md-4 bx--col-sm-4\">\n                <FormLabel>Translations</FormLabel>\n                <UnorderedList>\n                  {widget.availableTranslations.map((langcode, i) => (\n                    <ListItem key={`key-${i}`}>\n                      <CodeSnippet type=\"inline\">{langcode}</CodeSnippet>\n                    </ListItem>\n                  ))}\n                </UnorderedList>\n              </aside>\n            </article>\n          </Tab>\n          <Tab {...tabProps} id={`${widget.shortcode}--tab-3`} label=\"Code snippet\">\n            <div className=\"bx--row bx--row--r1\">\n              <div className=\"bx--col-lg-16\">\n                <Breadcrumb noTrailingSlash>\n                  <BreadcrumbItem href=\"/\">Home</BreadcrumbItem>\n                  <BreadcrumbItem href=\"/widget-types\">Widget types</BreadcrumbItem>\n                  <BreadcrumbItem isCurrentPage href=\"/\">\n                    {widget.title}\n                  </BreadcrumbItem>\n                </Breadcrumb>\n                <div className=\"widget-type__heading--wrapper\">\n                  <div className=\"widget-type__heading\">\n                    <div className=\"widget-type__heading--icon\">\n                      <ScriptReference32 />\n                    </div>\n                    <h1 className=\"widget-type__heading--text\">{widget.title}</h1>\n                  </div>\n                  {widget.repositoryUrl ? (\n                    <div className=\"widget-type__heading--repo-link\">\n                      <Button href={widget.repositoryUrl} renderIcon={LogoGithub16} kind=\"tertiary\">\n                        Source code\n                      </Button>\n                    </div>\n                  ) : (\n                    <></>\n                  )}\n                </div>\n              </div>\n            </div>\n            <div className=\"bx--row bx--row--r2\">\n              <div className=\"bx--col-lg-8\">\n                <p>\n                  Use the following snippet of code to inject this widget in an static HTML page. If\n                  you are looking for a more advanced integration, take a look at the{' '}\n                  <Link href=\"https://drupal.org/project/widget_instance\">Drupal module</Link>, and\n                  the <Link href=\"https://www.youtube.com/watch?v=SdDEbP-vtZg\">demo video</Link>.\n                </p>\n              </div>\n              <div className=\"bx--col-lg-16\">\n                <CodeSnippet type=\"multi\" hideCopyButton={true}>\n                  {buildCodeSnippet(widget)}\n                </CodeSnippet>\n              </div>\n            </div>\n          </Tab>\n          <Tab\n            {...tabProps}\n            id={`${widget.shortcode}--tab-3`}\n            label=\"Live Preview\"\n            onClick={() => setStartLoadingWidget(true)}\n          >\n            <div className=\"bx--row bx--row--r1\">\n              <div className=\"bx--col-lg-16\">\n                <Breadcrumb noTrailingSlash>\n                  <BreadcrumbItem href=\"/\">Home</BreadcrumbItem>\n                  <BreadcrumbItem href=\"/widget-types\">Widget types</BreadcrumbItem>\n                  <BreadcrumbItem isCurrentPage href=\"/\">\n                    {widget.title}\n                  </BreadcrumbItem>\n                </Breadcrumb>\n                <div className=\"widget-type__heading--wrapper\">\n                  <div className=\"widget-type__heading\">\n                    <div className=\"widget-type__heading--icon\">\n                      <DocumentView32 />\n                    </div>\n                    <h1 className=\"widget-type__heading--text\">{widget.title}</h1>\n                  </div>\n                  {widget.repositoryUrl ? (\n                    <div className=\"widget-type__heading--repo-link\">\n                      <Button href={widget.repositoryUrl} renderIcon={LogoGithub16} kind=\"tertiary\">\n                        Source code\n                      </Button>\n                    </div>\n                  ) : (\n                    <></>\n                  )}\n                </div>\n              </div>\n            </div>\n            <div className=\"bx--row bx--row--r2\">\n              <div className=\"bx--col-lg-12 some-content\" style={{ display: 'flex' }}>\n                <EmbedWidget\n                  widget={widget}\n                  doLoad={startLoadingWidget}\n                  moreProps={widgetAttributes}\n                />\n              </div>\n              <div className=\"bx--col-lg-4\">\n                <h3>Widget settings</h3>\n                <div className=\"widget-type--settings-warning\">\n                  <WarningAlt16 style={{ marginRight: '5px' }} />\n                  <div>\n                    Some widget types require settings at the time of embedding the widget. Here are\n                    some example values.\n                  </div>\n                </div>\n                <UnorderedList className=\"widget-type--settings-values\">\n                  {Object.keys(randomSettings).map((fieldName) => {\n                    const field = widget.settingsSchema.properties.fields.properties[fieldName];\n                    return (\n                      <ListItem key={fieldName}>\n                        <FormLabel>\n                          <Tooltip triggerText={`${field.title} (${field.type})`}>\n                            {field.description}\n                          </Tooltip>\n                        </FormLabel>\n                        <div>{randomSettings[fieldName]}</div>\n                      </ListItem>\n                    );\n                  })}\n                </UnorderedList>\n              </div>\n            </div>\n          </Tab>\n        </Tabs>\n        <AppFooter />\n      </div>\n    </>\n  );\n};\n\nWidgetTypePage.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      shortCode: PropTypes.string,\n    }),\n  }),\n};\n\nexport default WidgetTypePage;\n","import WidgetTypePage from './WidgetTypePage';\nexport default WidgetTypePage;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n// Take in a phrase and separate the third word in an array\nfunction createArrayFromPhrase(phrase) {\n  const splitPhrase = phrase.split(' ');\n  const thirdWord = splitPhrase.pop();\n  return [splitPhrase.join(' '), thirdWord];\n}\n\nconst InfoSection = ({ className, children, heading }) => (\n  <section className={`bx--row ${className} info-section`}>\n    <div className=\"bx--col-md-8 bx--col-lg-4 bx--col-xlg-3\">\n      <h3 className=\"info-section__heading\">{heading}</h3>\n    </div>\n    {children}\n  </section>\n);\n\nconst InfoCard = (props) => {\n  const splitHeading = createArrayFromPhrase(props.heading);\n\n  return (\n    <article className=\"info-card bx--col-md-4 bx--col-lg-4 bx--col-xlg-3 bx--offset-xlg-1\">\n      <h4 className=\"info-card__heading\">\n        {`${splitHeading[0]} `}\n        <strong>{splitHeading[1]}</strong>\n      </h4>\n      <p className=\"info-card__body\">{props.body}</p>\n      {props.icon}\n    </article>\n  );\n};\n\nInfoSection.propTypes = {\n  className: PropTypes.string,\n  heading: PropTypes.string,\n  children: PropTypes.any,\n};\n\nInfoCard.propTypes = {\n  heading: PropTypes.string,\n  body: PropTypes.string,\n  icon: PropTypes.element,\n};\n\nexport { InfoSection, InfoCard };\n","import React from 'react';\nimport { InfoCard, InfoSection } from '../Info';\nimport { Application32, Migrate32, SettingsAdjust32 } from '@carbon/icons-react';\n\nconst AppFooter = () => (\n  <InfoSection heading=\"The Principles\" className=\"landing-page__r3\">\n    <InfoCard\n      heading=\"Widgets are Configurable\"\n      body='Build once and embed many times. Configure your widgets when embedding to leverage the same widget in multiple situations. \"Tweak the widget knobs and stamp\".'\n      icon={<SettingsAdjust32 />}\n    />\n    <InfoCard\n      heading=\"Widgets are Modular\"\n      body=\"Widgets are designed to work seamlessly with each other in any digital experience. Use them in a website, or an application, as your digital building blocks.\"\n      icon={<Application32 />}\n    />\n    <InfoCard\n      heading=\"Widgets are Consistent\"\n      body=\"Weather your organization uses a CMS, static HTML, or any other tech widgets stay the same. Feel free to re-platform while keeping your widgets intact. Leverage the CMS integrations for a better editorial experience.\"\n      icon={<Migrate32 />}\n    />\n  </InfoSection>\n);\n\nexport default AppFooter;\n","import AppFooter from './AppFooter';\nexport default AppFooter;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport {\n  Header,\n  HeaderContainer,\n  HeaderName,\n  HeaderNavigation,\n  HeaderMenuButton,\n  HeaderMenuItem,\n  HeaderGlobalBar,\n  SkipToContent,\n  SideNav,\n  SideNavItems,\n  HeaderSideNavItems,\n} from 'carbon-components-react';\n\nconst AppHeader = () => (\n  <HeaderContainer\n    render={({ isSideNavExpanded, onClickSideNavExpand }) => (\n      <Header aria-label=\"Widget Catalog\">\n        <SkipToContent />\n        <HeaderMenuButton\n          aria-label=\"Open menu\"\n          onClick={onClickSideNavExpand}\n          isActive={isSideNavExpanded}\n        />\n        <HeaderName element={Link} to=\"/\" prefix=\"JS Widgets\">\n          Widget Catalog\n        </HeaderName>\n        <HeaderNavigation aria-label=\"Widget Catalog\">\n          <HeaderMenuItem element={Link} to=\"/widget-types\">\n            Widget Types\n          </HeaderMenuItem>\n        </HeaderNavigation>\n        <SideNav aria-label=\"Side navigation\" expanded={isSideNavExpanded} isPersistent={false}>\n          <SideNavItems>\n            <HeaderSideNavItems>\n              <HeaderMenuItem element={Link} to=\"/widget-types\">\n                Widget Types\n              </HeaderMenuItem>\n            </HeaderSideNavItems>\n          </SideNavItems>\n        </SideNav>\n        <HeaderGlobalBar />\n      </Header>\n    )}\n  />\n);\n\nexport default AppHeader;\n","import AppHeader from './AppHeader';\nexport default AppHeader;\n"],"sourceRoot":""}