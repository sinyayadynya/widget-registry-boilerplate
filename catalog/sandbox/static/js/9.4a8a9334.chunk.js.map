{"version":3,"sources":["components/WidgetsTable/index.js","components/WidgetsTable/WidgetsTable.jsx","content/WidgetsTablePage/WidgetsTablePage.jsx","content/WidgetsTablePage/buildTableRowsFromRegistry.js","content/WidgetsTablePage/buildTableHeaders.js","content/WidgetsTablePage/index.js","components/Info/Info.jsx","components/AppFooter/AppFooter.jsx","components/AppFooter/index.js","components/AppHeader/AppHeader.jsx","components/AppHeader/index.js"],"names":["WidgetsTable","rows","headers","descriptions","useState","filtered","setFiltered","keyword","setKeyword","fuse","Fuse","keys","renderCellValue","cell","id","split","value","href","email","style","verticalAlign","name","UnorderedList","className","map","langcode","ListItem","CodeSnippet","type","ws","i","Dropdown","label","items","itemToString","item","text","onChange","url","selectedItem","window","location","DataTable","render","getHeaderProps","getRowProps","getTableProps","TableContainer","TableToolbar","TableToolbarContent","TableToolbarSearch","e","target","search","Table","TableHead","TableRow","TableExpandHeader","header","TableHeader","isSortable","key","TableBody","row","widgetId","Fragment","TableExpandRow","cells","TableCell","info","TableExpandedRow","colSpan","length","to","WidgetsTablePage","registry","reduce","carry","shortcode","description","Object","assign","version","status","createdAt","Date","toDateString","updatedAt","owner","translations","websegments","links","substr","details","filter","headerData","hasData","buildTableHeaders","AppHeader","Breadcrumb","noTrailingSlash","BreadcrumbItem","isCurrentPage","variant","AppFooter","InfoSection","children","heading","InfoCard","props","splitHeading","phrase","splitPhrase","thirdWord","pop","join","createArrayFromPhrase","body","icon","HeaderContainer","isSideNavExpanded","onClickSideNavExpand","Header","SkipToContent","HeaderMenuButton","onClick","isActive","HeaderName","element","Link","prefix","HeaderMenuItem","SideNav","expanded","isPersistent","SideNavItems","HeaderSideNavItems","HeaderGlobalBar"],"mappings":"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","file":"static/js/9.4a8a9334.chunk.js","sourcesContent":["import WidgetsTable from './WidgetsTable';\nexport default WidgetsTable;\n","import React, { useState } from 'react';\nimport Fuse from 'fuse.js';\nimport PropTypes from 'prop-types';\nimport {\n  CodeSnippet,\n  DataTable,\n  Dropdown,\n  Link as CarbonLink,\n  ListItem,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableExpandedRow,\n  TableExpandHeader,\n  TableExpandRow,\n  TableHead,\n  TableHeader,\n  TableRow,\n  TableToolbar,\n  TableToolbarContent,\n  TableToolbarSearch,\n  UnorderedList,\n} from 'carbon-components-react';\nimport { Link } from 'react-router-dom';\nimport { ArrowRight16, UserAvatar16 } from '@carbon/icons-react';\n\nconst WidgetsTable = ({ rows, headers, descriptions }) => {\n  const [filtered, setFiltered] = useState(rows);\n  const [keyword, setKeyword] = useState('');\n\n  const fuse = new Fuse(rows, {\n    keys: ['name', 'owner.name', 'status'],\n  });\n\n  function renderCellValue(cell) {\n    // Render some of the values in a special way.\n    const id = cell.id.split(':')[1];\n    switch (id) {\n      case 'owner':\n        return typeof cell.value === 'object' ? (\n          <CarbonLink href={`mailto:${cell.value.email}`}>\n            <UserAvatar16 style={{ verticalAlign: 'middle' }} /> {cell.value.name}\n          </CarbonLink>\n        ) : null;\n      case 'translations':\n        return cell.value ? (\n          <UnorderedList className=\"bx--list__langcodes\">\n            {cell.value.map((langcode) => (\n              <ListItem key={`item-${langcode}`}>\n                <CodeSnippet type=\"inline\">{langcode}</CodeSnippet>\n              </ListItem>\n            ))}\n          </UnorderedList>\n        ) : null;\n      case 'websegments':\n        return cell.value ? (\n          <UnorderedList className=\"bx--list__websegments\">\n            {cell.value.map((ws, i) => (\n              <ListItem key={`ws-${i}`}>\n                <CodeSnippet type=\"inline\">{ws}</CodeSnippet>\n              </ListItem>\n            ))}\n          </UnorderedList>\n        ) : null;\n      case 'status':\n        return cell.value ? (\n          <CodeSnippet type=\"inline\" className={`status--${cell.value}`}>\n            {cell.value}\n          </CodeSnippet>\n        ) : null;\n      case 'links':\n        return cell.value ? (\n          <Dropdown\n            id=\"default\"\n            label=\"- Please select -\"\n            items={cell.value}\n            itemToString={(item) => (item ? item.text : '')}\n            onChange={({ selectedItem: { id: url } }) => {\n              window.location.href = url;\n            }}\n          />\n        ) : null;\n      default:\n        return cell.value;\n    }\n  }\n\n  return (\n    <DataTable\n      rows={keyword ? filtered : rows}\n      headers={headers}\n      render={({ rows, headers, getHeaderProps, getRowProps, getTableProps }) => (\n        <TableContainer>\n          <TableToolbar aria-label=\"data table toolbar\">\n            <TableToolbarContent>\n              <TableToolbarSearch\n                onChange={(e) => {\n                  setKeyword(e.target.value);\n                  setFiltered(fuse.search(e.target.value).map(({ item }) => item));\n                }}\n              />\n            </TableToolbarContent>\n          </TableToolbar>\n\n          <Table {...getTableProps()}>\n            <TableHead>\n              <TableRow>\n                <TableExpandHeader />\n                {headers.map((header) => (\n                  <TableHeader\n                    key={`header-${header.key}`}\n                    {...getHeaderProps({ header, isSortable: header.isSortable })}\n                  >\n                    {header.header}\n                  </TableHeader>\n                ))}\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {rows.map((row) => {\n                const widgetId = `${getRowProps({ row }).key}`;\n                return (\n                  <React.Fragment key={row.id}>\n                    <TableExpandRow {...getRowProps({ row })}>\n                      {row.cells.map((cell) => (\n                        <TableCell key={cell.id} className={`bx--table-cell__${cell.info.header}`}>\n                          {renderCellValue(cell)}\n                        </TableCell>\n                      ))}\n                    </TableExpandRow>\n                    <TableExpandedRow colSpan={headers.length + 1}>\n                      <h6>Description</h6>\n                      <div>{descriptions[widgetId]}</div>\n                      <div className=\"bx--expandable-row--ctas\">\n                        <Link to={`/widget-type/${widgetId}`} className=\"bx--btn bx--btn--tertiary\">\n                          More details <ArrowRight16 className=\"bx--btn__icon\" />\n                        </Link>\n                      </div>\n                    </TableExpandedRow>\n                  </React.Fragment>\n                );\n              })}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      )}\n    />\n  );\n};\n\nWidgetsTable.propTypes = {\n  headers: PropTypes.arrayOf(\n    PropTypes.shape({\n      key: PropTypes.string,\n      header: PropTypes.string,\n    }),\n  ),\n  rows: PropTypes.arrayOf(PropTypes.object),\n  descriptions: PropTypes.object,\n};\n\nexport default WidgetsTable;\n","import React from 'react';\nimport AppHeader from '../../components/AppHeader';\nimport AppFooter from '../../components/AppFooter';\nimport WidgetsTable from '../../components/WidgetsTable';\nimport buildTableHeaders from './buildTableHeaders';\nimport buildTableRowsFromRegistry from './buildTableRowsFromRegistry';\n\nimport registry from '../../data/registry.json';\nimport { Breadcrumb, BreadcrumbItem } from 'carbon-components-react';\n\nconst WidgetsTablePage = () => {\n  const descriptions = registry.reduce(\n    (carry, { shortcode, description }) => Object.assign(carry, { [shortcode]: description }),\n    {},\n  );\n  const rows = buildTableRowsFromRegistry(registry);\n  const headers = buildTableHeaders(rows);\n  return (\n    <>\n      <AppHeader />\n      <div className=\"bx--grid bx--grid--full-width landing-page\">\n        <div className=\"bx--row landing-page__banner\">\n          <div className=\"bx--col-lg-16\">\n            <Breadcrumb noTrailingSlash>\n              <BreadcrumbItem href=\"/\">Home</BreadcrumbItem>\n              <BreadcrumbItem isCurrentPage href=\"/\">\n                Widget types\n              </BreadcrumbItem>\n            </Breadcrumb>\n            <h1 className=\"landing-page__heading\">Widgets types</h1>\n            <div>\n              The collection of available widget types in the widget repository. Widget types in the\n              repository are available in the CMS integrations without any additional effort.\n            </div>\n          </div>\n        </div>\n        <div className=\"bx--row\">\n          <div className=\"bx--col-lg-16\">\n            <WidgetsTable\n              variant=\"dark\"\n              headers={headers}\n              rows={rows}\n              descriptions={descriptions}\n            />\n          </div>\n        </div>\n        <AppFooter />\n      </div>\n    </>\n  );\n};\n\nexport default WidgetsTablePage;\n","import React from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport { Information16 } from '@carbon/icons-react';\n\nexport default function (widgetTypes) {\n  return widgetTypes.map((item) => {\n    return {\n      id: item['shortcode'],\n      name: item['title'],\n      description: item['description'],\n      version: item['version'],\n      status: item['status'] ?? '',\n      createdAt: item['createdAt'] ? new Date(item['createdAt']).toDateString() : null,\n      updatedAt: item['updatedAt'] ? new Date(item['updatedAt']).toDateString() : null,\n      owner: item['owner'],\n      translations: item['availableTranslations'] || null,\n      websegments: item['webSegmentPaths'] || null,\n      links: [\n        {\n          text: 'Demo',\n          id: `https://pages.${item['repositoryUrl'].substr(8)}`,\n        },\n        {\n          text: 'Repository',\n          id: item['repositoryUrl'],\n        },\n      ],\n      details: (\n        <RouterLink to={`/widget-type/${item['shortcode']}`}>\n          <Information16 />\n        </RouterLink>\n      ),\n    };\n  });\n}\n","export default function (rows) {\n  return [\n    {\n      key: 'name',\n      header: 'Name',\n      isSortable: true,\n    },\n    {\n      key: 'version',\n      header: 'Version',\n      isSortable: true,\n    },\n    {\n      key: 'status',\n      header: 'Status',\n      isSortable: true,\n    },\n    {\n      key: 'createdAt',\n      header: 'Created',\n      isSortable: true,\n    },\n    {\n      key: 'updatedAt',\n      header: 'Modified',\n      isSortable: true,\n    },\n    {\n      key: 'translations',\n      header: 'Translations',\n      isSortable: false,\n    },\n    {\n      key: 'owner',\n      header: 'Owner',\n      isSortable: true,\n    },\n    {\n      key: 'websegments',\n      header: 'Web Segments',\n      isSortable: false,\n    },\n    {\n      key: 'links',\n      header: 'Links',\n      isSortable: false,\n    },\n    {\n      key: 'details',\n      header: '',\n      isSortable: false,\n    },\n  ].filter((headerData) =>\n    // Remove the headers that have no data.\n    rows.reduce((hasData, row) => hasData || !!row[headerData.key], false),\n  );\n}\n","import WidgetsTablePage from './WidgetsTablePage';\nexport default WidgetsTablePage;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n// Take in a phrase and separate the third word in an array\nfunction createArrayFromPhrase(phrase) {\n  const splitPhrase = phrase.split(' ');\n  const thirdWord = splitPhrase.pop();\n  return [splitPhrase.join(' '), thirdWord];\n}\n\nconst InfoSection = ({ className, children, heading }) => (\n  <section className={`bx--row ${className} info-section`}>\n    <div className=\"bx--col-md-8 bx--col-lg-4 bx--col-xlg-3\">\n      <h3 className=\"info-section__heading\">{heading}</h3>\n    </div>\n    {children}\n  </section>\n);\n\nconst InfoCard = (props) => {\n  const splitHeading = createArrayFromPhrase(props.heading);\n\n  return (\n    <article className=\"info-card bx--col-md-4 bx--col-lg-4 bx--col-xlg-3 bx--offset-xlg-1\">\n      <h4 className=\"info-card__heading\">\n        {`${splitHeading[0]} `}\n        <strong>{splitHeading[1]}</strong>\n      </h4>\n      <p className=\"info-card__body\">{props.body}</p>\n      {props.icon}\n    </article>\n  );\n};\n\nInfoSection.propTypes = {\n  className: PropTypes.string,\n  heading: PropTypes.string,\n  children: PropTypes.any,\n};\n\nInfoCard.propTypes = {\n  heading: PropTypes.string,\n  body: PropTypes.string,\n  icon: PropTypes.element,\n};\n\nexport { InfoSection, InfoCard };\n","import React from 'react';\nimport { InfoCard, InfoSection } from '../Info';\nimport { Application32, Migrate32, SettingsAdjust32 } from '@carbon/icons-react';\n\nconst AppFooter = () => (\n  <InfoSection heading=\"The Principles\" className=\"landing-page__r3\">\n    <InfoCard\n      heading=\"Widgets are Configurable\"\n      body='Build once and embed many times. Configure your widgets when embedding to leverage the same widget in multiple situations. \"Tweak the widget knobs and stamp\".'\n      icon={<SettingsAdjust32 />}\n    />\n    <InfoCard\n      heading=\"Widgets are Modular\"\n      body=\"Widgets are designed to work seamlessly with each other in any digital experience. Use them in a website, or an application, as your digital building blocks.\"\n      icon={<Application32 />}\n    />\n    <InfoCard\n      heading=\"Widgets are Consistent\"\n      body=\"Weather your organization uses a CMS, static HTML, or any other tech widgets stay the same. Feel free to re-platform while keeping your widgets intact. Leverage the CMS integrations for a better editorial experience.\"\n      icon={<Migrate32 />}\n    />\n  </InfoSection>\n);\n\nexport default AppFooter;\n","import AppFooter from './AppFooter';\nexport default AppFooter;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport {\n  Header,\n  HeaderContainer,\n  HeaderName,\n  HeaderNavigation,\n  HeaderMenuButton,\n  HeaderMenuItem,\n  HeaderGlobalBar,\n  SkipToContent,\n  SideNav,\n  SideNavItems,\n  HeaderSideNavItems,\n} from 'carbon-components-react';\n\nconst AppHeader = () => (\n  <HeaderContainer\n    render={({ isSideNavExpanded, onClickSideNavExpand }) => (\n      <Header aria-label=\"Widget Catalog\">\n        <SkipToContent />\n        <HeaderMenuButton\n          aria-label=\"Open menu\"\n          onClick={onClickSideNavExpand}\n          isActive={isSideNavExpanded}\n        />\n        <HeaderName element={Link} to=\"/\" prefix=\"JS Widgets\">\n          Widget Catalog\n        </HeaderName>\n        <HeaderNavigation aria-label=\"Widget Catalog\">\n          <HeaderMenuItem element={Link} to=\"/widget-types\">\n            Widget Types\n          </HeaderMenuItem>\n        </HeaderNavigation>\n        <SideNav aria-label=\"Side navigation\" expanded={isSideNavExpanded} isPersistent={false}>\n          <SideNavItems>\n            <HeaderSideNavItems>\n              <HeaderMenuItem element={Link} to=\"/widget-types\">\n                Widget Types\n              </HeaderMenuItem>\n            </HeaderSideNavItems>\n          </SideNavItems>\n        </SideNav>\n        <HeaderGlobalBar />\n      </Header>\n    )}\n  />\n);\n\nexport default AppHeader;\n","import AppHeader from './AppHeader';\nexport default AppHeader;\n"],"sourceRoot":""}